/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignupImport } from './routes/signup'
import { Route as LoginImport } from './routes/login'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedIndexImport } from './routes/_authed/index'
import { Route as AuthedOnboardingImport } from './routes/_authed/onboarding'
import { Route as AuthedProjectProjectIdImport } from './routes/_authed/project/$projectId'

// Create Virtual Routes

const AuthedProjectProjectIdIndexLazyImport = createFileRoute(
  '/_authed/project/$projectId/',
)()
const AuthedProjectProjectIdTeamLazyImport = createFileRoute(
  '/_authed/project/$projectId/team',
)()
const AuthedProjectProjectIdSettingsLazyImport = createFileRoute(
  '/_authed/project/$projectId/settings',
)()
const AuthedProjectProjectIdWorkflowsIndexLazyImport = createFileRoute(
  '/_authed/project/$projectId/workflows/',
)()
const AuthedProjectProjectIdWorkflowsWorkflowIdLazyImport = createFileRoute(
  '/_authed/project/$projectId/workflows/$workflowId',
)()

// Create/Update Routes

const SignupRoute = SignupImport.update({
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedIndexRoute = AuthedIndexImport.update({
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedOnboardingRoute = AuthedOnboardingImport.update({
  path: '/onboarding',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProjectProjectIdRoute = AuthedProjectProjectIdImport.update({
  path: '/project/$projectId',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedProjectProjectIdIndexLazyRoute =
  AuthedProjectProjectIdIndexLazyImport.update({
    path: '/',
    getParentRoute: () => AuthedProjectProjectIdRoute,
  } as any).lazy(() =>
    import('./routes/_authed/project/$projectId/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthedProjectProjectIdTeamLazyRoute =
  AuthedProjectProjectIdTeamLazyImport.update({
    path: '/team',
    getParentRoute: () => AuthedProjectProjectIdRoute,
  } as any).lazy(() =>
    import('./routes/_authed/project/$projectId/team.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthedProjectProjectIdSettingsLazyRoute =
  AuthedProjectProjectIdSettingsLazyImport.update({
    path: '/settings',
    getParentRoute: () => AuthedProjectProjectIdRoute,
  } as any).lazy(() =>
    import('./routes/_authed/project/$projectId/settings.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthedProjectProjectIdWorkflowsIndexLazyRoute =
  AuthedProjectProjectIdWorkflowsIndexLazyImport.update({
    path: '/workflows/',
    getParentRoute: () => AuthedProjectProjectIdRoute,
  } as any).lazy(() =>
    import('./routes/_authed/project/$projectId/workflows/index.lazy').then(
      (d) => d.Route,
    ),
  )

const AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute =
  AuthedProjectProjectIdWorkflowsWorkflowIdLazyImport.update({
    path: '/workflows/$workflowId',
    getParentRoute: () => AuthedProjectProjectIdRoute,
  } as any).lazy(() =>
    import(
      './routes/_authed/project/$projectId/workflows/$workflowId.lazy'
    ).then((d) => d.Route),
  )

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/_authed/onboarding': {
      id: '/_authed/onboarding'
      path: '/onboarding'
      fullPath: '/onboarding'
      preLoaderRoute: typeof AuthedOnboardingImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/project/$projectId': {
      id: '/_authed/project/$projectId'
      path: '/project/$projectId'
      fullPath: '/project/$projectId'
      preLoaderRoute: typeof AuthedProjectProjectIdImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/project/$projectId/settings': {
      id: '/_authed/project/$projectId/settings'
      path: '/settings'
      fullPath: '/project/$projectId/settings'
      preLoaderRoute: typeof AuthedProjectProjectIdSettingsLazyImport
      parentRoute: typeof AuthedProjectProjectIdImport
    }
    '/_authed/project/$projectId/team': {
      id: '/_authed/project/$projectId/team'
      path: '/team'
      fullPath: '/project/$projectId/team'
      preLoaderRoute: typeof AuthedProjectProjectIdTeamLazyImport
      parentRoute: typeof AuthedProjectProjectIdImport
    }
    '/_authed/project/$projectId/': {
      id: '/_authed/project/$projectId/'
      path: '/'
      fullPath: '/project/$projectId/'
      preLoaderRoute: typeof AuthedProjectProjectIdIndexLazyImport
      parentRoute: typeof AuthedProjectProjectIdImport
    }
    '/_authed/project/$projectId/workflows/$workflowId': {
      id: '/_authed/project/$projectId/workflows/$workflowId'
      path: '/workflows/$workflowId'
      fullPath: '/project/$projectId/workflows/$workflowId'
      preLoaderRoute: typeof AuthedProjectProjectIdWorkflowsWorkflowIdLazyImport
      parentRoute: typeof AuthedProjectProjectIdImport
    }
    '/_authed/project/$projectId/workflows/': {
      id: '/_authed/project/$projectId/workflows/'
      path: '/workflows'
      fullPath: '/project/$projectId/workflows'
      preLoaderRoute: typeof AuthedProjectProjectIdWorkflowsIndexLazyImport
      parentRoute: typeof AuthedProjectProjectIdImport
    }
  }
}

// Create and export the route tree

interface AuthedProjectProjectIdRouteChildren {
  AuthedProjectProjectIdSettingsLazyRoute: typeof AuthedProjectProjectIdSettingsLazyRoute
  AuthedProjectProjectIdTeamLazyRoute: typeof AuthedProjectProjectIdTeamLazyRoute
  AuthedProjectProjectIdIndexLazyRoute: typeof AuthedProjectProjectIdIndexLazyRoute
  AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute: typeof AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute
  AuthedProjectProjectIdWorkflowsIndexLazyRoute: typeof AuthedProjectProjectIdWorkflowsIndexLazyRoute
}

const AuthedProjectProjectIdRouteChildren: AuthedProjectProjectIdRouteChildren =
  {
    AuthedProjectProjectIdSettingsLazyRoute:
      AuthedProjectProjectIdSettingsLazyRoute,
    AuthedProjectProjectIdTeamLazyRoute: AuthedProjectProjectIdTeamLazyRoute,
    AuthedProjectProjectIdIndexLazyRoute: AuthedProjectProjectIdIndexLazyRoute,
    AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute:
      AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute,
    AuthedProjectProjectIdWorkflowsIndexLazyRoute:
      AuthedProjectProjectIdWorkflowsIndexLazyRoute,
  }

const AuthedProjectProjectIdRouteWithChildren =
  AuthedProjectProjectIdRoute._addFileChildren(
    AuthedProjectProjectIdRouteChildren,
  )

interface AuthedRouteChildren {
  AuthedOnboardingRoute: typeof AuthedOnboardingRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
  AuthedProjectProjectIdRoute: typeof AuthedProjectProjectIdRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedOnboardingRoute: AuthedOnboardingRoute,
  AuthedIndexRoute: AuthedIndexRoute,
  AuthedProjectProjectIdRoute: AuthedProjectProjectIdRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/onboarding': typeof AuthedOnboardingRoute
  '/': typeof AuthedIndexRoute
  '/project/$projectId': typeof AuthedProjectProjectIdRouteWithChildren
  '/project/$projectId/settings': typeof AuthedProjectProjectIdSettingsLazyRoute
  '/project/$projectId/team': typeof AuthedProjectProjectIdTeamLazyRoute
  '/project/$projectId/': typeof AuthedProjectProjectIdIndexLazyRoute
  '/project/$projectId/workflows/$workflowId': typeof AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute
  '/project/$projectId/workflows': typeof AuthedProjectProjectIdWorkflowsIndexLazyRoute
}

export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/onboarding': typeof AuthedOnboardingRoute
  '/': typeof AuthedIndexRoute
  '/project/$projectId/settings': typeof AuthedProjectProjectIdSettingsLazyRoute
  '/project/$projectId/team': typeof AuthedProjectProjectIdTeamLazyRoute
  '/project/$projectId': typeof AuthedProjectProjectIdIndexLazyRoute
  '/project/$projectId/workflows/$workflowId': typeof AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute
  '/project/$projectId/workflows': typeof AuthedProjectProjectIdWorkflowsIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/signup': typeof SignupRoute
  '/_authed/onboarding': typeof AuthedOnboardingRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/project/$projectId': typeof AuthedProjectProjectIdRouteWithChildren
  '/_authed/project/$projectId/settings': typeof AuthedProjectProjectIdSettingsLazyRoute
  '/_authed/project/$projectId/team': typeof AuthedProjectProjectIdTeamLazyRoute
  '/_authed/project/$projectId/': typeof AuthedProjectProjectIdIndexLazyRoute
  '/_authed/project/$projectId/workflows/$workflowId': typeof AuthedProjectProjectIdWorkflowsWorkflowIdLazyRoute
  '/_authed/project/$projectId/workflows/': typeof AuthedProjectProjectIdWorkflowsIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/signup'
    | '/onboarding'
    | '/'
    | '/project/$projectId'
    | '/project/$projectId/settings'
    | '/project/$projectId/team'
    | '/project/$projectId/'
    | '/project/$projectId/workflows/$workflowId'
    | '/project/$projectId/workflows'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/signup'
    | '/onboarding'
    | '/'
    | '/project/$projectId/settings'
    | '/project/$projectId/team'
    | '/project/$projectId'
    | '/project/$projectId/workflows/$workflowId'
    | '/project/$projectId/workflows'
  id:
    | '__root__'
    | '/_authed'
    | '/login'
    | '/signup'
    | '/_authed/onboarding'
    | '/_authed/'
    | '/_authed/project/$projectId'
    | '/_authed/project/$projectId/settings'
    | '/_authed/project/$projectId/team'
    | '/_authed/project/$projectId/'
    | '/_authed/project/$projectId/workflows/$workflowId'
    | '/_authed/project/$projectId/workflows/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
  SignupRoute: typeof SignupRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
  SignupRoute: SignupRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login",
        "/signup"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/onboarding",
        "/_authed/",
        "/_authed/project/$projectId"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/_authed/onboarding": {
      "filePath": "_authed/onboarding.tsx",
      "parent": "/_authed"
    },
    "/_authed/": {
      "filePath": "_authed/index.tsx",
      "parent": "/_authed"
    },
    "/_authed/project/$projectId": {
      "filePath": "_authed/project/$projectId.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/project/$projectId/settings",
        "/_authed/project/$projectId/team",
        "/_authed/project/$projectId/",
        "/_authed/project/$projectId/workflows/$workflowId",
        "/_authed/project/$projectId/workflows/"
      ]
    },
    "/_authed/project/$projectId/settings": {
      "filePath": "_authed/project/$projectId/settings.lazy.tsx",
      "parent": "/_authed/project/$projectId"
    },
    "/_authed/project/$projectId/team": {
      "filePath": "_authed/project/$projectId/team.lazy.tsx",
      "parent": "/_authed/project/$projectId"
    },
    "/_authed/project/$projectId/": {
      "filePath": "_authed/project/$projectId/index.lazy.tsx",
      "parent": "/_authed/project/$projectId"
    },
    "/_authed/project/$projectId/workflows/$workflowId": {
      "filePath": "_authed/project/$projectId/workflows/$workflowId.lazy.tsx",
      "parent": "/_authed/project/$projectId"
    },
    "/_authed/project/$projectId/workflows/": {
      "filePath": "_authed/project/$projectId/workflows/index.lazy.tsx",
      "parent": "/_authed/project/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
