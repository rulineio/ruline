/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router';

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as LoginImport } from './routes/login';
import { Route as AuthedImport } from './routes/_authed';

// Create Virtual Routes

const AuthedIndexLazyImport = createFileRoute('/_authed/')();

// Create/Update Routes

const LoginRoute = LoginImport.update({
    path: '/login',
    getParentRoute: () => rootRoute,
} as any);

const AuthedRoute = AuthedImport.update({
    id: '/_authed',
    getParentRoute: () => rootRoute,
} as any);

const AuthedIndexLazyRoute = AuthedIndexLazyImport.update({
    path: '/',
    getParentRoute: () => AuthedRoute,
} as any).lazy(() =>
    import('./routes/_authed/index.lazy').then((d) => d.Route),
);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
    interface FileRoutesByPath {
        '/_authed': {
            id: '/_authed';
            path: '';
            fullPath: '';
            preLoaderRoute: typeof AuthedImport;
            parentRoute: typeof rootRoute;
        };
        '/login': {
            id: '/login';
            path: '/login';
            fullPath: '/login';
            preLoaderRoute: typeof LoginImport;
            parentRoute: typeof rootRoute;
        };
        '/_authed/': {
            id: '/_authed/';
            path: '/';
            fullPath: '/';
            preLoaderRoute: typeof AuthedIndexLazyImport;
            parentRoute: typeof AuthedImport;
        };
    }
}

// Create and export the route tree

interface AuthedRouteChildren {
    AuthedIndexLazyRoute: typeof AuthedIndexLazyRoute;
}

const AuthedRouteChildren: AuthedRouteChildren = {
    AuthedIndexLazyRoute: AuthedIndexLazyRoute,
};

const AuthedRouteWithChildren =
    AuthedRoute._addFileChildren(AuthedRouteChildren);

export interface FileRoutesByFullPath {
    '': typeof AuthedRouteWithChildren;
    '/login': typeof LoginRoute;
    '/': typeof AuthedIndexLazyRoute;
}

export interface FileRoutesByTo {
    '/login': typeof LoginRoute;
    '/': typeof AuthedIndexLazyRoute;
}

export interface FileRoutesById {
    __root__: typeof rootRoute;
    '/_authed': typeof AuthedRouteWithChildren;
    '/login': typeof LoginRoute;
    '/_authed/': typeof AuthedIndexLazyRoute;
}

export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: '' | '/login' | '/';
    fileRoutesByTo: FileRoutesByTo;
    to: '/login' | '/';
    id: '__root__' | '/_authed' | '/login' | '/_authed/';
    fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
    AuthedRoute: typeof AuthedRouteWithChildren;
    LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
    AuthedRoute: AuthedRouteWithChildren,
    LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/login"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authed/": {
      "filePath": "_authed/index.lazy.tsx",
      "parent": "/_authed"
    }
  }
}
ROUTE_MANIFEST_END */
